import java.util.ArrayList;

class BinarySearchTree {
  Node root;

  BinarySearchTree() {
    this.root = null;
  }

  //=============================================================== INSERT

  public void insert(char method, int data) {
    if (method == 'r') 
      root = insertRec(root, data);
    else
      insertIter(data);
  }

  private Node insertRec(Node current, int data) {
    Node temp;
    if (current == null){
      current = new Node(data);
      return current;
    }
    else if (current.data < data) {
      temp = insertRec(current.right, data);
      current.right = temp;
      temp.parent = current;
    }
    else{
      temp = insertRec(current.left, data);
      current.left = temp;
      temp.parent = current;
    }
    return current;
  }

  private void insertIter(int data) {
    Node newNode = new Node(data);
    if (root == null) {
      root = newNode;
      return;
    }
    Node current = root;
    Node parent = null;
    while (true) {
      parent = current;
      if (current.data < data) {
        current = current.right;
        if (current == null) {
          current = newNode;
          current.parent = parent;
          parent.right = current;
          return;
        }
      }
      else {
        current = current.left;
        if (current == null) {
          current = newNode;
          current.parent = parent;
          parent.left = current;
          return;
        }
      }
    }
  }

  //=============================================================== DELETE

  public void delete(char method, int data) {
    if (method == 'r') 
      deleteRec(root, data);
    else
      deleteIter(root,data);
  }

  private void deleteRec(Node current, int data){
    if (current == null)
      return;
    if (data < current.data)
      deleteRec(current.left, data);
    else if(data > current.data)
      deleteRec(current.right, data);
    else { //found node
      if (current.right == null && current.left != null) {
        current = current.left;
        return;
      }
      else if (current.left == null && current.right != null) {
        current = current.right;
        return;
      }
      Node temp = findMinRec(current.right);
      temp.left = current.left;
      temp.right = current.right;
      current = null;
      
      return;
    }
  }

  private void deleteIter(Node current, int data){

  }

  //=============================================================== FIND MIN

  public Node findMin(char method) {
    if (method == 'r')
      return findMinRec(root);
    
    return findMinIter(root);
  }

  private Node findMinRec(Node current) {
      if (current.left != null)
        findMinRec(current.left);
    
    return current;
  }

  private Node findMinIter(Node current) {
    int min = current.data;
    while (current.left != null) {
      if (current.data < min)
        min = current.data;
      current = current.left;
    }
    
    return current;
  }

  //=============================================================== FIND MAX

  public Node findMax(char method) {
    if (method == 'r')
      return findMaxRec(root);
    
    return findMaxIter(root);
  }

  private Node findMaxRec(Node current) {
      if (current.right != null)
        return findMaxRec(current.right);
      
      return current;
  }

  private Node findMaxIter(Node current) {
    int max = current.data;
    while (current.right != null) {
      if (current.data > max)
        max = current.data;
      current = current.right;
    }

    return current;
  }

  //=============================================================== FIND NEXT
  public Node findNext(char method, int data) {
    Node current = findNode(root, data);
    if (method == 'r') {
      return findNextRec(current, data);
    }
    return findNextIter(current, data);
  }

  private Node findNextRec(Node current, int baseValue) {
    if (current.data > baseValue) 
      return current;
    if (current.right != null && findMinRec(current.right).data > baseValue)
      return findMinRec(current.right);
    
    return findNextRec(current.parent, baseValue);
  }

  private Node findNextIter(Node current, int baseValue) {
    if (current.right != null)
      return findMinIter(current.right);
    while (current.data < baseValue) 
        current = current.parent;
    return current;
  }

  //=============================================================== FIND PREV
  public Node findPrev(char method, int data) {
    if (method == 'r') {
      Node current = findNode(root, data);
      return findPrevRec(current, data);
    }
    return findPrevIter(root, data);
  }

  private Node findPrevRec(Node current, int baseValue) {
    if (current.data < baseValue) 
      return current;
    if (current.left != null && findMaxRec(current.left).data > baseValue)
      return findMaxRec(current.left);

    return findPrevRec(current.parent, baseValue);
  }

  private Node findPrevIter(Node current, int baseValue) {
    if (current.left != null)
      return findMaxIter(current.left);
    while (current.data > basevalue){
      current = current.parent;
    }
    return current;
  }
  
  //=============================================================== SEARCH
  public boolean findNode(int data) {
    if (findNode(root, root.data) != null)
      return true;
    return false;
  }
  
  private Node findNode(Node current, int searchData) {
    if (current != null) {
      if (current.data == searchData)
        return current;
      else {
        Node temp = findNode(current.right, searchData);
        if (temp == null) {
          temp = findNode(current.left, searchData);
        }
        return temp;
      }
    }
    return null;
  }
  
  //=============================================================== SORT
  public ArrayList sort() {
    ArrayList<Integer> sorted = new ArrayList<Integer>();
    sort(root, sorted);
    return sorted;
  }

  private ArrayList sort(Node current, ArrayList sorted) {
    if (current != null){
      sort(current.left, sorted);
      sorted.add(current.data);
      sort(current.left, sorted);
    }
    return sorted;
  }

  //=============================================================== PRINT
  public void print() {
    inOrder(root);
    System.out.println();
    //postOrder(root);
    //System.out.println();
  }
  
  private void inOrder(Node current) {
   if (current!=null){
      inOrder(current.left);
      System.out.print(" " + current.data + " ");
      inOrder(current.right);
    }
  }

  private void postOrder(Node current) {
    if (current != null){
      postOrder(current.left);
      postOrder(current.right);
      System.out.print(" " + current.data);
    }
   }
  }



class Main {
  public static void main(String[] args) {
    BinarySearchTree b = new BinarySearchTree();
    int[] treeList = {10,30,5,8,2,35,15,4,14};
    for (int i = 0; i < treeList.length; i++)
      b.insert('i',treeList[i]);
    System.out.println(b.findNext('r',4).data);
    System.out.println(b.findPrev('r',15).data);
    /*
    System.out.println(b.findNode(2));
    System.out.println(b.findNode(40));
    System.out.println(b.findNext('r', 10));
    System.out.println(b.findMin('r'));
    System.out.println(b.findMax('r'));
    */
    b.print();
    b.delete('r',15);
    b.print();
  }
  
  //=============================================================== SORTED ARRAY
  private static int[] getSortedArray(int n) {
    int[] sorted = new int[n];
    int j = 0;
    for(int i = n; i > 0; i--) {
      sorted[j] = i;
      j++;
    }
    return sorted;
  }

  //=============================================================== RANDOM ARRAY
  private static int[] getRandomArray(int n) {
    Random randomIndex = new Random();
    int[] randomArr = new int[n];
    for (int i = 0; i < n; i ++) {
      if (i == 0) 
        randomArr[i] = 2;
      else if (i % 2 == 0) 
        randomArr[i] = i * 2;
      else if (i % 3 == 0)
        randomArr[i] = i * 3;
      else
        randomArr[i] = i;
    }
    int temp;
    for (int i = 0; i < n; i ++) {
      int index = randomIndex.nextInt(n);
      temp = randomArr[index];
      randomArr[index] = randomArr[i];
      randomArr[i] = temp;
    }
    return randomArr;
  }
}
